{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../PythonToolbar.svelte",
    "../../Slideshow.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport { onMount } from \"svelte\";\nimport { codeRunLock } from \"../store/code-block\";\nimport { Row, Col, Input, Button, Modal, ModalBody, ModalFooter, ModalHeader, } from \"sveltestrap\";\nexport let code;\nlet editCode = code;\nlet showEdit = false;\nconst toggle = () => (showEdit = !showEdit);\nlet result = [];\nlet currentTime = Date.now();\nonMount(() => {\n    const interval = setInterval(() => {\n        currentTime = Date.now();\n    }, 200);\n    return () => {\n        clearInterval(interval);\n    };\n});\nfunction runPython(src) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const timeout = 2000;\n        // https://groups.google.com/g/brython/c/xLv55qq-L1s\n        $codeRunLock = Date.now() + timeout;\n        result = [];\n        const console_log = console.log;\n        // dynamically create an invisible DIV with type=\"text/python3\"\n        const pyScript = document.createElement(\"script\");\n        pyScript.style.visibility = \"hidden\";\n        pyScript.type = \"text/python3\";\n        // set DIV content to Python source code\n        pyScript.textContent = src;\n        document.body.appendChild(pyScript);\n        // run brython(), searching Python code in DIV tags\n        console.log = (x) => (result = [...result, x.trim()]);\n        brython({ debug: 1 });\n        yield new Promise((resolve) => setTimeout(resolve, timeout));\n        // console.log = console_log;\n        // clean up\n        document.body.removeChild(pyScript);\n    });\n}\n</script>\n\n<style>\n  .toolbar {\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .toolbar button {\n    margin-top: 10px;\n    margin-left: 10px;\n    font-family: \"Quattrocento Sans\";\n  }\n\n  .code-result {\n    white-space: pre-wrap;\n    height: 100%;\n    max-height: 465px;\n    overflow: scroll;\n    padding: 10px;\n  }\n</style>\n\n<div class=\"toolbar\">\n  <button\n    on:click={() => {\n      showEdit = true;\n      editCode = code\n      runPython(editCode);\n    }}\n    disabled={currentTime < $codeRunLock}>\n    Run Code\n  </button>\n  <a\n    target=\"_blank\"\n    href=\"http://pythontutor.com/iframe-embed.html#code={encodeURIComponent(code)}&cumulative=false&py=3\">\n    <button>Visualize</button>\n  </a>\n</div>\n\n<div\n  on:keydown|stopPropagation={() => {}}\n  on:keypress|stopPropagation={() => {}}\n  on:mousewheel|stopPropagation={() => {}}\n>\n  <Modal \n    isOpen={showEdit} {toggle} transitionOptions={{}} size=\"lg\">\n    <ModalHeader {toggle}>\n      <span>Code Editor</span>\n      <span class=\"text-muted ml-3\"><small>powered by <a class=\"text-color-secondary\" href=\"https://brython.info/\">Brython</a></small></span>\n    </ModalHeader>\n    <ModalBody>\n      <Row style={`height: 450px`}>\n        <Col xs=\"6\">\n          <textarea\n            style=\"width: 100%; height: 100%\"\n            bind:value={editCode} />\n        </Col>\n        <Col xs=\"6\">\n          <p class=\"code-result bg-light\">{result.join('\\n')}</p>\n        </Col>\n      </Row>\n    </ModalBody>\n    <ModalFooter>\n      <Button\n        color=\"primary\"\n        disabled={currentTime < $codeRunLock}\n        on:click={() => {\n          runPython(editCode);\n        }}>\n        Run\n      </Button>\n      <Button color=\"secondary\" on:click={toggle}>Cancel</Button>\n    </ModalFooter>\n  </Modal>\n</div>",
    "<script lang=\"ts\">import { onMount, afterUpdate } from \"svelte\";\nimport { codeBlockInfos } from '../store/code-block';\nimport jQuery from \"jquery\";\nimport PythonToolbar from \"./PythonToolbar.svelte\";\nexport let sourceUrl;\nexport let filename;\nlet container;\nonMount(() => {\n    window.remark.create({ sourceUrl, container }, () => {\n        // callback after creating slides\n        const selection = jQuery('.remark-slides-area code.python');\n        $codeBlockInfos = selection.map(function () {\n            const node = jQuery(this);\n            return {\n                ref: null,\n                node,\n                code: node.children().toArray().map(codeLineDiv => codeLineDiv.innerText).join('\\n')\n            };\n        }).toArray();\n        const slides = jQuery('.remark-slide-content');\n        console.log(slides);\n        let imgStr;\n        slides.append(\"<img class='logo' width='100px' style='position:absolute; right: 15px; top: 15px;' src='img/hcilogo_snu.png'/>\");\n    });\n});\ncodeBlockInfos.subscribe(() => {\n    $codeBlockInfos.forEach(block => {\n        block.node.after(block.ref);\n    });\n});\n</script>\n\n<svelte:head>\n  <title>{filename} | Digital Computer Concept and Practice | SNU HCIL</title>\n</svelte:head>\n\n<div class=\"container\" bind:this={container} />\n\n<!--\n  Mimic React's dynamic component rendering behavior\n  1. get the required number of components\n  2. render svelte components using #each directive\n  3. bind all rendered components to JS variable\n  4. move them into desired space by direct manipulating DOM at afterUpdate\n-->\n{#each $codeBlockInfos as block }\n  <div bind:this={block.ref}>\n    <PythonToolbar code={block.code} />\n  </div>\n{/each}\n\n<style>\n  :global(body) {\n    padding: 0px;\n  }\n  .container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqDE,QAAQ,8BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,QAAQ,AAC3B,CAAC,AAED,uBAAQ,CAAC,MAAM,eAAC,CAAC,AACf,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,mBAAmB,AAClC,CAAC,AAED,YAAY,8BAAC,CAAC,AACZ,WAAW,CAAE,QAAQ,CACrB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,IAAI,AACf,CAAC;AClBO,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,GAAG,AACd,CAAC,AACD,UAAU,eAAC,CAAC,AACV,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC"
}